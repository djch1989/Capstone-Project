?mtcars
head(mtcars)
mtcarsmod <- mtcars
str(mtcarsmod)
mtcarsmod$cyl <- as.factor(mtcarsmod$cyl)
mtcarsmod$am <- as.factor(mtcarsmod$am)
mtcarsmod$vs <- as.factor(mtcarsmod$vs)
library(MASS)
fit <- lm(mpg~., data = mtcarsmod)
step <- stepAIC(fit5, direction = "both", trace = FALSE)
step
fit1 <- lm(mpg~am, data = mtcarsmod)
fit2 <- update(fit, mpg~am+wt)
fit3 <- update(fit, mpg~am+wt+qsec)
fit4 <- update(fit, mpg~am+wt+qsec+cyl)
fit5 <- update(fit, mpg~am+wt+qsec+cyl+disp)
anova(fit,fit1,fit2,fit3,fit4)
par(mfrow=c(2,2))
plot(step)
?mtcars
head(mtcars)
mtcarsmod <- mtcars
str(mtcarsmod)
mtcarsmod$cyl <- as.factor(mtcarsmod$cyl)
mtcarsmod$am <- as.factor(mtcarsmod$am)
mtcarsmod$vs <- as.factor(mtcarsmod$vs)
library(MASS)
fit <- lm(mpg~., data = mtcarsmod)
step <- stepAIC(fit5, direction = "both", trace = FALSE)
step
fit1 <- lm(mpg~am, data = mtcarsmod)
fit2 <- update(fit, mpg~am+wt)
fit3 <- update(fit, mpg~am+wt+qsec)
fit4 <- update(fit, mpg~am+wt+qsec+cyl)
fit5 <- update(fit, mpg~am+wt+qsec+cyl+disp)
anova(fit,fit1,fit2,fit3,fit4)
par(mfrow=c(2,2))
plot(step)
q()
install.packages('MikTex')
install.packages('TinyTex')
install.packages('tinytex')
?mtcars
head(mtcars)
summary(fit1 <- lm(mpg~am, data = mtcarsmod))
summary(fit1 <- lm(mpg~am, data = mtcars))
summary(fit1 <- lm(mpg~am, data = mtcars))$coeff
summary(fit1 <- lm(mpg~am, data = mtcars))$coeff[1,1]
summary(fit1 <- lm(mpg~am, data = mtcars))$coeff[2,1]
summary(fit1 <- lm(mpg~am, data = mtcars))$coeff[2,1] - summary(fit1 <- lm(mpg~am, data = mtcars))$coeff[1,1]
summary(fit1 <- lm(mpg~as.factor(am), data = mtcars))
library(MASS)
fit <- lm(mpg~., data = mtcarsmod)
step <- stepAIC(fit, direction = "both", trace = FALSE)
step
mtcarsmod <- mtcars
str(mtcarsmod)
mtcarsmod$cyl <- as.factor(mtcarsmod$cyl)
mtcarsmod$am <- as.factor(mtcarsmod$am)
mtcarsmod$vs <- as.factor(mtcarsmod$vs)
library(MASS)
fit <- lm(mpg~., data = mtcarsmod)
step <- stepAIC(fit, direction = "both", trace = FALSE)
step
summary(step)
head(mtcars)
load(mtcars)
mtcars
step
knitr::opts_chunk$set(echo = TRUE)
mtcarsmod <- mtcars
str(mtcarsmod)
mtcarsmod$cyl <- as.factor(mtcarsmod$cyl)
mtcarsmod$am <- as.factor(mtcarsmod$am)
mtcarsmod$vs <- as.factor(mtcarsmod$vs)
fit1 <- lm(mpg~am, data = mtcarsmod)
summary(fit1)
library(MASS)
fit <- lm(mpg~., data = mtcarsmod)
step <- stepAIC(fit, direction = "both", trace = FALSE)
step
fit2 <- update(fit, mpg~am+wt)
fit3 <- update(fit, mpg~am+wt+qsec)
fit4 <- update(fit, mpg~am+wt+qsec+cyl)
fit5 <- update(fit, mpg~am+wt+qsec+cyl+disp)
anova(fit1,fit2,fit3,fit4,fit5)
library(ggplot2)
ggplot(data = mtcarsmod) + geom_boxplot(mapping = aes(x=am, y = mpg)) + labs(title= "MPG of automobiles - Transmission wise", x = "Type of Transmission", y = "Miles per gallon")
par(mfrow=c(2,2))
plot(fit1)
par(mfrow=c(2,2))
plot(fit3)
install.packages('lmtest')
library(lmtest)
bptest(fit3)
bptest(fit1)
plot(step)
knitr::opts_chunk$set(echo = TRUE)
mtcarsmod <- mtcars
str(mtcarsmod)
mtcarsmod$cyl <- as.factor(mtcarsmod$cyl)
mtcarsmod$am <- as.factor(mtcarsmod$am)
mtcarsmod$vs <- as.factor(mtcarsmod$vs)
fit1 <- lm(mpg~am, data = mtcarsmod)
summary(fit1)
library(MASS)
fit <- lm(mpg~., data = mtcarsmod)
step <- stepAIC(fit, direction = "both", trace = FALSE)
step
fit2 <- update(fit, mpg~am+wt)
fit3 <- update(fit, mpg~am+wt+qsec)
fit4 <- update(fit, mpg~am+wt+qsec+cyl)
fit5 <- update(fit, mpg~am+wt+qsec+cyl+disp)
anova(fit1,fit2,fit3,fit4,fit5)
library(ggplot2)
ggplot(data = mtcarsmod) + geom_boxplot(mapping = aes(x=am, y = mpg)) + labs(title= "MPG of automobiles - Transmission wise", x = "Type of Transmission", y = "Miles per gallon")
par(mfrow=c(2,2))
plot(fit1)
par(mfrow=c(2,2))
plot(fit3)
knitr::opts_chunk$set(echo = TRUE)
mtcarsmod <- mtcars
str(mtcarsmod)
mtcarsmod$cyl <- as.factor(mtcarsmod$cyl)
mtcarsmod$am <- as.factor(mtcarsmod$am)
mtcarsmod$vs <- as.factor(mtcarsmod$vs)
fit1 <- lm(mpg~am, data = mtcarsmod)
summary(fit1)
library(MASS)
fit <- lm(mpg~., data = mtcarsmod)
step <- stepAIC(fit, direction = "both", trace = FALSE)
step
fit2 <- update(fit, mpg~am+wt)
fit3 <- update(fit, mpg~am+wt+qsec)
fit4 <- update(fit, mpg~am+wt+qsec+cyl)
fit5 <- update(fit, mpg~am+wt+qsec+cyl+disp)
anova(fit1,fit2,fit3,fit4,fit5)
library(ggplot2)
ggplot(data = mtcarsmod) + geom_boxplot(mapping = aes(x=am, y = mpg)) + labs(title= "MPG of automobiles - Transmission wise", x = "Type of Transmission", y = "Miles per gallon")
par(mfrow=c(2,2))
plot(fit1)
par(mfrow=c(2,2))
plot(fit3)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("lubridate")
install.packages("caret")
install.packages("tidyr")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
install.packages("caret", dependencies = TRUE)
install.packages("labelled")
install.packages("caret", dependencies = TRUE)
install.packages("e1071")
install.packages("e1071")
install.packages("C:/Users/chdjb9/Downloads/e1071_1.7-4.zip", repos = NULL, type = "win.binary")
install.packages("TeachingDemos")
install.packages("caret", dependencies = TRUE)
‘combinat’, ‘questionr’, ‘ROCR’, ‘mvtnorm’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘ISwR’, ‘corpcor’, ‘pROC’, ‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’
install.packages("combinat", dependencies = TRUE)
install.packages("questionr", dependencies = TRUE)
‘combinat’, ‘questionr’, ‘ROCR’, ‘mvtnorm’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘ISwR’, ‘corpcor’, ‘pROC’, ‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’
install.packages("ROCR", dependencies = TRUE)
install.packages("mvtnorm", dependencies = TRUE)
install.packages("mvtnorm", dependencies = TRUE)
‘combinat’, ‘questionr’, ‘ROCR’, ‘mvtnorm’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘ISwR’, ‘corpcor’, ‘pROC’, ‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’
install.packages("modeltools", dependencies = TRUE)
install.packages("strucchange", dependencies = TRUE)
‘combinat’, ‘questionr’, ‘ROCR’, ‘mvtnorm’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘ISwR’, ‘corpcor’, ‘pROC’, ‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’
install.packages("coin", dependencies = TRUE)
‘combinat’, ‘questionr’, ‘ROCR’, ‘mvtnorm’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘ISwR’, ‘corpcor’, ‘pROC’, ‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’
install.packages("ISwR", dependencies = TRUE)
install.packages("corpcor", dependencies = TRUE)
install.packages("pROC", dependencies = TRUE)
install.packages("mclust", dependencies = TRUE)
‘combinat’, ‘questionr’, ‘ROCR’, ‘mvtnorm’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘ISwR’, ‘corpcor’, ‘pROC’, ‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’
install.packages("pROC", dependencies = TRUE)
install.packages("ks", dependencies = TRUE)
install.packages("pROC", dependencies = TRUE)
‘combinat’, ‘questionr’, ‘ROCR’, ‘mvtnorm’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘ISwR’, ‘corpcor’, ‘pROC’, ‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’
install.packages(‘BradleyTerry2’, ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’, dependencies = TRUE)
install.packages("BradleyTerry2", ‘earth’, ‘fastICA’, ‘gam’, ‘kernlab’, ‘klaR’, ‘mda’, ‘mlbench’, ‘MLmetrics’, ‘party’, ‘pls’, ‘proxy’, ‘randomForest’, ‘RANN’, ‘spls’, ‘subselect’, ‘pamr’, ‘superpc’, ‘Cubist’, dependencies = TRUE)
install.packages("BradleyTerry2", "earth", "fastICA", "gam", "kernlab", dependencies = TRUE)
install.packages("BradleyTerry2", dependencies = TRUE)
install.packages("earth", dependencies = TRUE)
install.packages("fastICA", dependencies = TRUE)
install.packages("gam", dependencies = TRUE)
install.packages("kernlab", dependencies = TRUE)
install.packages("klaR", dependencies = TRUE)
install.packages("mda", dependencies = TRUE)
install.packages("mlbench", dependencies = TRUE)
install.packages("MLmetrics", dependencies = TRUE)
install.packages("party", dependencies = TRUE)
install.packages("pls", dependencies = TRUE)
install.packages("proxy", dependencies = TRUE)
install.packages("randomFores", dependencies = TRUE)
install.packages("randomForest", dependencies = TRUE)
install.packages("RANN", dependencies = TRUE)
install.packages("RANN", dependencies = TRUE)
install.packages("RANN", dependencies = TRUE)
install.packages("C:/Users/chdjb9/Downloads/RANN_2.6.1.zip", repos = NULL, type = "win.binary")
install.packages("spls", dependencies = TRUE)
install.packages("subselect", dependencies = TRUE)
install.packages("pamr", dependencies = TRUE)
install.packages("superpc", dependencies = TRUE)
install.packages("Cubist", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(AppliedPredictiveModeling)
install.packages("CORElearn", dependencies = TRUE)
library(AppliedPredictiveModeling)
install.packages("CORElearn", dependencies = TRUE)
library(AppliedPredictiveModeling)
library(caret)
install.packages("prodlim", dependencies = TRUE)
install.packages("prodlim", dependencies = TRUE)
library(caret)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(dplyr)
training[,grep("IL")]
training[,grep("IL", training)]
training[,grep("IL", names(training))]
training[,grep("IL", names(training), value = TRUE)]
?grep
training[,grep(" IL", names(training), value = TRUE)]
training[,grep("IL", names(training), value = TRUE)]
training[,grep("^IL", names(training), value = TRUE)]
training[,grep("IL^", names(training), value = TRUE)]
training[,grep("^IL", names(training), value = TRUE)]
?preProcess
cbind(training[,grep("^IL", names(training), value = TRUE)], training$diagnosis)
datasetforpreproc <- cbind(training[,grep("^IL", names(training), value = TRUE)], training$diagnosis)
preprocess(datasetforpreproc, method = "PCA", thresh = 0.9)
library(caret)
preprocess(datasetforpreproc, method = "PCA", thresh = 0.9)
preProcess(datasetforpreproc, method = "PCA", thresh = 0.9)
preProcess(datasetforpreproc, method = "pca", thresh = 0.9)
preProcess(datasetforpreproc, method = "pca")
preProcess(training, method = "pca")
preProcess(training, method = "pca", thresh = 0.9)
preProcess(datasetforpreproc, method = "pca", thresh = 0.9)
predict.preProcess
predict.preProcess(datasetforpreproc, method = "pca", thresh = 0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
datasetforpreproc <- cbind(training[,grep("^IL", names(training), value = TRUE)], training$diagnosis)
?train
preProcess(datasetforpreproc, method = "pca", thresh = 0.8)
train1 <- predict(preProcess(datasetforpreproc, method = "pca", thresh = 0.8),datasetforpreproc )
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=train1)
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=preProcess(datasetforpreproc, method = "pca", thresh = 0.8))
modelfit1 <- train(datasetforpreproc$`training$diagnosis`~., data = datasetforpreproc, method = "glm")
datasetforpreproc
modelfit1 <- train(diagnosis~., data = datasetforpreproc, method = "glm")
datasetforpreproc
tail(datasetforpreproc)
nrow(datasetforpreproc$IL_11)
modelfit1 <- train(diagnosis~., data = datasetforpreproc, method = "glm")
modelfit1 <- train(diagnosis~., data = datasetforpreproc, method = "pca")
modelfit1 <- train(diagnosis~.- "IL_11", data = datasetforpreproc, method = "pca")
train1 <- predict(preProcess(datasetforpreproc, method = "pca", thresh = 0.8),datasetforpreproc)
modelFit1 <- train(diagnosis ~ .,method="glm",data=train1)
train1
tail(train1)
modelFit1 <- train(diagnosis ~ .,method="glm",data=train1)
train1 <- predict(preProcess(datasetforpreproc, method = "pca", thresh = 0.8),datasetforpreproc )
modelfit1 <- train(diagnosis~., data = train1, method = "glm")
modelFitPCA <- train(datasetforpreproc$`training$diagnosis`~., method = "glm", preProcess = "pca", data = datasetforpreproc)
datasetforpreproc
confusionMatrix(datasetforpreproc$`training$diagnosis`,predict(modelFit1, training))
confusionMatrix(datasetforpreproc$`training$diagnosis`,predict(modelFitPCA, training))
modelFitPCA <- train(datasetforpreproc$`training$diagnosis`~., method = "glm", preProcess = "pca", data = datasetforpreproc)
datasetforpreproc <- training[,grep("^IL|diagnosis", names(training), value = TRUE)]
head(datasetforpreproc)
modelFitPCA <- train(datasetforpreproc$diagnosis~., method = "glm", preProcess = "pca", data = datasetforpreproc)
modelFitPCA <- train(diagnosis~., method = "glm", preProcess = "pca", data = datasetforpreproc)
confusionMatrix(datasetforpreproc$diagnosis,predict(modelFitPCA, testing))
confusionMatrix(datasetforpreproc$diagnosis,predict(modelFitPCA, datasetforpreproc))
modelFitNormal <- train(diagnosis~., method = "glm", data = datasetforpreproc)
confusionMatrix(datasetforpreproc$diagnosis,predict(modelFitNormal, datasetforpreproc))
trainingIL <- training[,grep("^IL|diagnosis", names(training), value = TRUE)]
testingIL <- testing[,grep("^IL|diagnosis", names(training), value = TRUE)]
modelFitPCA <- train(diagnosis~., method = "glm", preProcess = "pca", data = trainingIL)
modelFitNormal <- train(diagnosis~., method = "glm", data = training)
confusionMatrix(testingIL$diagnosis,predict(modelFitNormal, testingIL))
modelFitNormal <- train(diagnosis~., method = "glm", data = trainingIL)
confusionMatrix(testingIL$diagnosis,predict(modelFitNormal, testingIL))
modelFitPCA <- train(diagnosis~., method = "glm", preProcess = "pca",data = trainingIL)
confusionMatrix(testingIL$diagnosis,predict(modelFitPCA, testingIL))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rfmod <- train(diagnosis~., method = "rf", data = training)
ldamod <- train(diagnosis~., method = "lda", data = training)
gbmmod <- train(diagnosis~., method = "gbm", data = training)
rf.pred <- predict(rfmod,testing)
lda.pred <- predict(ldamod,testing)
gbm.pred <- predict(gb,mod,testing)
gbm.pred <- predict(gbmmod,testing)
comdataset <- as.data.frame("rfpred" = rf.pred, "ldapred"= lda.pred, "gbmpred"= gbm.pred, "diagnosis" = testing$diagnosis)
comdataset <- data.frame("rfpred" = rf.pred, "ldapred"= lda.pred, "gbmpred"= gbm.pred, "diagnosis" = testing$diagnosis)
head(comdataset)
combmodfit <- train(diagnosis~., method = "gam", data=comdataset)
combpred <- predict(combmodfit, comdataset)
confusionMatrix(rf.pred, testing$diagnosis)
confusionMatrix(lda.pred, testing$diagnosis)
confusionMatrix(gbm.pred, testing$diagnosis)
confusionMatrix(combpred, testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rfmod <- train(diagnosis~., method = "rf", data = training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
lassomod <- train(CompressiveStrength~., ,method="lasso", data=training)
lassomod <- train(CompressiveStrength~., ,method="lasso", data=training)
library(elasticnet)
install.packages('lars')
library(elasticnet)
lassomod <- train(CompressiveStrength~., ,method="lasso", data=training)
confusionMatrix(predict(lassomod,testing), testing$CompressiveStrength)
lassopred <- predict(lassomod, testing)
confusionMatrix(lassopred, testing$CompressiveStrength)
lassopred
dim(testing)
coef(lassomod)
lassomod
?plot.enet
plot.enet(lassomod)
lassomod$bestTune
lassomod$results
lassomod$finalModel
externaldata <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
externaldata <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile = "/gadData.csv")
externaldata <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile = "\gaData.csv")
externaldata <- download.file("https:\\d396qusza40orc.cloudfront.net\predmachlearn\gaData.csv", destfile = "\gaData.csv")
externaldata <- download.file('https:\\d396qusza40orc.cloudfront.net\predmachlearn\gaData.csv', destfile = '\gaData.csv')
?download.file
externaldata <- download.file("https:\\d396qusza40orc.cloudfront.net\predmachlearn\gaData.csv", destfile = "\gaData.csv")
externaldata <- download.file('https:\\d396qusza40orc.cloudfront.net\predmachlearn\gaData.csv', destfile = '\gaData.csv')
externaldata <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile = "\gaData.csv")
externaldata <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile = "/gaData.csv")
externaldata <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile = "C:/Users/chdjb9/OneDrive - BP/Virtual Trainings/Coursera/Practical Machine Learning/gaData.csv")
head(externaldata)
externaldata <- load.file("C:/Users/chdjb9/OneDrive - BP/Virtual Trainings/Coursera/Practical Machine Learning/gaData.csv")
externaldata <- load("C:/Users/chdjb9/OneDrive - BP/Virtual Trainings/Coursera/Practical Machine Learning/gaData.csv")
externaldata
externaldata <- "C:/Users/chdjb9/OneDrive - BP/Virtual Trainings/Coursera/Practical Machine Learning/gaData.csv"
externaldata
?load
externaldata <- load("C:/Users/chdjb9/OneDrive - BP/Virtual Trainings/Coursera/Practical Machine Learning/gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("C:/Users/chdjb9/OneDrive - BP/Virtual Trainings/Coursera/Practical Machine Learning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
??bats
install.packages('forecast')
library(forecast)
install.packages('fracdiff')
install.packages('fracdiff')
install.packages("C:/Users/chdjb9/Downloads/fracdiff_1.5-1.zip", repos = NULL, type = "win.binary")
library(forecast)
install.packages('quadprog')
install.packages("C:/Users/chdjb9/Downloads/quadprog_1.5-8.zip", repos = NULL, type = "win.binary")
library(forecast)
?bats
bats(tstrain)
forecastmod <- bats(tstrain)
forecastpred <- predict(forecastmod, testing$visitsTumblr)
forecastpred
forecast::forecast(forecastmod, testing$visitsTumblr)
wd()
dir()
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(corrplot)
library(gbm)
train_dataset <- read.csv('./pml-training.csv', header=T)
valid_dataset <- read.csv('./pml-testing.csv', header=T)
dim(train_dataset)
dim(valid_dataset)
training<- train_dataset[, colSums(is.na(train_dataset)) == 0]
validation <- valid_dataset[, colSums(is.na(valid_dataset)) == 0]
dim(training)
dim(validation)
training <- training[, -c(1:7)]
validation <- validation[, -c(1:7)]
dim(training)
dim(validation)
set.seed(1234)
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
training <- training[inTrain, ]
testing <- training[-inTrain, ]
dim(training)
dim(testing)
Near_Zero_Var <- nearZeroVar(training)
training <- training[, -Near_Zero_Var]
testing  <- testing[, -Near_Zero_Var]
dim(training)
dim(testing)
cor_mat <- cor(training[, -53])
corrplot(cor_mat, order = "FPC", method = "color", type = "upper",
tl.cex = 0.8, tl.col = rgb(0, 0, 0))
highlyCorrelated = findCorrelation(cor_mat, cutoff=0.75)
names(training)[highlyCorrelated]
set.seed(12345)
decisionTreeMod1 <- train(classe ~ ., data=training, method="rpart", trControl = trainControl(method = "cv", number = 5))
fancyRpartPlot(decisionTreeMod1$finalModel)
predictTreeMod1 <- predict(decisionTreeMod1, testing)
confusionmatrixtree <- confusionMatrix(predictTreeMod1, testing$classe)
confusionmatrixtree
plot(confusionmatrixtree$table, col = confusionmatrixtree$byClass,
main = paste("Decision Tree - Accuracy =", round(confusionmatrixtree$overall['Accuracy'], 4)))
controlRandomForest <- trainControl(method="cv", number=5, verboseIter=FALSE)
modRandomForest <- train(classe ~ ., data=training, method="rf", trControl=controlRandomForest)
modRandomForest$finalModel
predictRandomForest <- predict(modRandomForest, newdata=testing)
confusionmatrixRandomForest <- confusionMatrix(predictRandomForest, testing$classe)
confusionmatrixRandomForest
plot(modRandomForest)
plot(confusionmatrixRandomForest$table, col = confusionmatrixRandomForestf$byClass, main = paste("Random Forest Confusion Matrix: Accuracy =", round(confusionmatrixRandomForest$overall['Accuracy'], 4)))
set.seed(12345)
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modGBM  <- train(classe ~ ., data=training, method = "gbm", trControl = controlGBM, verbose = FALSE)
modGBM$finalModel
print(modGBM)
predictGBM <- predict(modGBM, newdata=testing)
confusionmatrixGBM <- confusionMatrix(predictGBM, testing$classe)
confusionmatrixGBM
Results <- predict(modRandomForest, newdata=validation)
Results
shiny::runApp('Capstone Project/final/en_US/ShinyApp/Word_Prediction_App')
runApp('Capstone Project/final/en_US/ShinyApp/Word_Prediction_App')
runApp('Capstone Project/final/en_US/ShinyApp/Word_Prediction_App')
runApp()
getwd()
setwd("./Capstone Project/final/en_US/ShinyApp")
runApp('~/GitHub/Developing_Data_Products_Week4_Assignment')
runApp('Word_Prediction_App')
getwd()
getwd()
setwd("./Capstone Project/final/en_US/ShinyAppFinal")
getwd()
setwd("./Capstone Project/final/en_US")
setwd("C:/Users/chdjb9/OneDrive - BP/Documents/Capstone Project/final/en_US/ShinyAppFinal")
getwd()
runApp()
